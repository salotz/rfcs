#+TODO: IDEA WIP | DRAFT | STABLE

* Request For Comments (RFCs)

** Proposals

*** IDEA 001: Written Document Format

Use org-mode markup.


*** WIP 002: Semantic Changelog

- nexp :: ~rfc:salotz.002_semantic-changelog.org~

Proposal: [[file:rfcs/salotz.002_semantic-changelog.org][file:./rfcs/salotz.002_semantic-changelog.org]]

Abstract:

#+begin_quote
A mini-format for git commit messages that supports machine
readability (without sacrificing human readability) semantic
expression of impacts of code change.
#+end_quote


*** WIP 003: RFC Specifications

- nexp :: ~rfc:salotz.003_rfc-specs~

Proposal: [[file:./rfcs/salotz.003_rfc-specs.org]]

Abstract:

#+begin_quote
Specifications for necessary information for an RFC and how to format
it.
#+end_quote




*** WIP 004: Name Expressions (nexps)

- nexp :: ~rfc:salotz.004_nexps~

Proposal: [[file:./salotz.004_nexps.org]]

Abstract:

#+begin_quote
A proposal that defines how to name digital document entities:
e.g. ~format:namespace.field-1_field-2~
#+end_quote




*** IDEA 005: Syxel Buffers Format

- nexp :: ~rfc:salotz.005_syxel-buffers~

Proposal: [[file:./rfcs/salotz.005_syxel-buffers.org]]

Abstract:

#+begin_quote
Format that utilizes a granular unit of 'syxel' (symbolic pixel) in a
rectangular plane similar to a pixel based image format. Syxels are
basically character points.
#+end_quote


*** WIP 006: Codetags

- nexp :: ~rfc:salotz.006_codetags~

Proposal: [[file:./rfcs/salotz.006_codetags.org]]

Abstract:

#+begin_quote
Tags that are added in comments to code that add semantic meaning to
otherwise freeform comments, making them searchable by machine and
available to tooling.
#+end_quote


*** IDEA 007: Python Library Repo Layout

- nexp :: ~rfc:salotz.007_py-lib-layout~

Proposal: [[file:./rfcs/salotz.007_py-lib-layout.org]]

Executive Summary:

#+begin_quote
A layout and content specification that follows best practices that
strives for effectiveness rather than complete compatibility.
#+end_quote


*** WIP 008: Linux Shell Startup Indirection Layer

- nexp :: ~rfc:salotz.008_linux-shell-startup~

Proposal: [[file:./rfcs/salotz.008_linux-shell-startup.org]]

Executive Summary:

#+begin_quote
A collection of script files which add a layer of indirection to
standard linux shells (i.e. POSIX ~sh~ and ~bash~) that allows for a
more modular, composable, and semantic organization.
#+end_quote


*** IDEA 009: Repo Layout Templates

- nexp :: ~rfc:salotz.009_repo-layout~

Proposal: [[file:./rfcs/salotz.009_repo-layout.org]]

Executive Summary:

#+begin_quote
A template format for generating and specifying repo layouts in
directories, i.e. cookiecutter.
#+end_quote


*** IDEA 010: Growth Mindset Versioning

- nexp :: ~rfc:010_growth-versioning~

Proposal: [[file:./rfcs/010_growth-versioning.org]]

Executive Summary:

#+begin_quote
Version formatting that doesn't lie.
#+end_quote




*** IDEA 011: Writetags

- nexp :: ~rfc:011_write-tags~

Proposal: [[file:./rfcs/011_write-tags.org]]

Executive Summary:

#+begin_quote
Tags (see [[*006: Codetags][rfc:salotz.006_codetags]] for a similar proposal) that are
added in comments to prose (documentation, whitepapers, technical
documents, etc.) that add semantic meaning to otherwise freeform
comments, making them searchable by machine and available to tooling.
#+end_quote


*** IDEA 012: Errors as Information

- nexp :: ~rfc:012_information-errors~

Proposal: [[file:./rfcs/012_information-errors.org]]

Executive Summary:

#+begin_quote
Errors in information systems, like event logs, should take on a role
of providing information rather than being categorized based on their
operational importance as is the case in most languages (e.g. checked
vs. unchecked exceptions). Inspired by Stuart Holloway and
specifically this talk: https://youtu.be/oOON--g1PyU?t=965
#+end_quote


*** IDEA 013: Code Targets

- nexp :: ~rfc:013_code-targets~

Proposal: [[file:./rfcs/013_code-targets.org]]

Executive Summary:

#+begin_quote
Code targets are a specification for a syntax which should be
recognized by metaprogramming tools like template engines, editors,
etc.
#+end_quote

*** IDEA 014: Project & Maintainence Intentions for OSS

- nexp :: ~rfc:salotz.014_project-intent~

Proposal: [[file:./rfcs/salotz.014_project-intent.org]]

Executive Summary:

#+begin_quote
A proposal for a best practice that includes a clear statement of
intent on open source projects that would allow for greater
understanding by consumers about the current state and intentions of
developers in fairly unambiguous terms. Extensions could provide
optional semantic vocabularies for very clear intent and to provide a
set of choices for developers so they don't have to think as much from
scratch.
#+end_quote


*** IDEA 015: Collaborative Line-Oriented Plaintext Document Editing Protocol

- nexp :: ~rfc:salotz.015_collab-line-editing~

Proposal: [[file:./rfcs/salotz.015_collab-line-editing.org]]

Executive Summary:

#+begin_quote
A protocol and format to facilitate low-friction editing of
line-oriented document formats like LaTeX, Markdown, Org-mode, etc.
#+end_quote

*** IDEA 016: Nearly Trivial Plaintext Formats

- nexp :: ~rfc:salotz.016_trivial-plaintext-formats~

Proposal: [[file:./rfcs/salotz.016_trivial-plaintext-formats.org]]

Executive Summary:

#+begin_quote
A small collection of nearly trivial plaintext formats along with file
extensions. Includes things like a line based list format.
#+end_quote

*** IDEA 017: Bunker: User De-Militarized Zone

- nexp :: ~rfc:salotz.017_bunker~

Proposal: [[file:./rfcs/salotz.017_bunker.org]]


#+begin_quote
Introduces the concept of a ~bunker~ directory for user only data in
their respective $HOME directories which is simply ~.${USER}~ or
~.${USER}.d~. This is to allow a safe-space for customization and
configuration that will be unmolested by other programs since it is
unlikely that they will have this hardcoded in their behavior.
#+end_quote


*** IDEA 018: Secrets Database

- nexp :: ~rfc:salotz.018_secret-database~

Proposal: [[file:./rfcs/salotz.018_secret-database.org]]


#+begin_quote
A specification for a secrets database using GPG and mostly compatible
with tools like ~pass~.
#+end_quote




*** IDEA 019: Meta-Project Protocol (MPP)

- nexp :: ~rfc:salotz.019_MPP~

Proposal: [[file:./rfcs/salotz.019_MPP.org]]


#+begin_quote
Protocol for live-updating of file-based development projects.
#+end_quote

*** IDEA 020: In-Repo Issue Tracking Schema

- nexp :: ~rfc:salotz.020-repo-issue-tracker~

Proposal: [[file:./rfcs/salotz.020-repo-issue-tracker.org]]

Executive Summary:

#+begin_quote
Schema for including issue tracking sources with a project, without
having to rely on outside forges.
#+end_quote


* Proposal For Software (PFSs)

In addition to merely specifying best practices, protocols, and
standards via RFCs it has come to my attention that there is a need
for a listing of concrete proposals for actual working software that
perform critical functionality.

The purpose here is not to "shout at clouds" but to attempt to
actually evaluate and validate the need for the introduction of new
software.

In addition to describing the purpose and semantics of the propsed
software in-depth analyses of prior art should be done as well with
feature matrices showing gaps in the current functionality.

It is unclear about how exactly to incorporate the idea of the ease of
integration (or perhaps "civility") of a piece of software but
attempts should be made to take this into account. E.g. is it
open-source and licensed in such a way that it could be used in
perpetuity.

** Version Control for mixed collections of digital assets


*** Description

Categories of *reflection* capable for data objects:

- "black" objects :: opaque binary blobs
- "grey" objects :: e.g. PostScript files, XML, image formats
  - specialized and customizable diffing functionality
- "white" objects :: those with well-known (semi-universal) diffing
  strategies and merge techniques

Ideas:

**** Beyond decentralized vs centralized

There should be a middle-ground between Decentralized and Centralized
VCS which is more similar to federated systems.

The idea is that authority over the "master copy" (centralized
vs. decentralized) is controlled (by some means) and can be delegated
to a collection of hub servers.

A purely decentralized system (like git) is fundamentally unable to
handle *black objects* because the source of these can only be
controlled either through shear replacement (called *arbitrary
replacement* in which no merge strategy is possible and decisions are
completely arbitrary and determined by authority) or through locking
(*change control* again completely arbitrary if we are to avoid "wars"
between users).

While both *arbitrary replacement* (*arbitration*) and *change
control* (*delegation*) are viable solutions in general for dealing
with black objects, they can't be implemented with git without an
extension to the protocol. These protocol extensions are typically
performed by the hosting service which controls the "master copy"
(like github or gitlab, called *forges*).

This leads to lock-in and/or a lack of ability to cooperate with
others and essentially a centralized, non-distributed paradigm that
allows for offline work encoded as a temporary "fork" of authority,
despite the "decentralized" moniker.

While any new VCS system should surely support offline-work it should
be reified in the protocol, rather than being implemented as a
temporary fork.


Furthermore, the usage of the two strategies for blackish objects
(*arbitration* and *delegation*) should also be reified and be able to
be composed.

Here is an example:

Lets say you are an organization that is working on a large product
and you have more than one team.

You don't want the progress of one team to hold up the other one and
you would like them to work completely in parallel.

However, you don't want them to make mutually incompatible changes to
objects for which they really should be cooperating with other teams
on (particularly to blackish objects which can't be intelligently
merged).

So you split up the entire repo image (the "monorepo" perhaps) into
several regions:

- team A's region :: region A
- team B's region :: region B
- shared resources region :: region S
- innaccessible region (for other teams or administrators only etc.) :: region X

This allows for work done region's A and B to happen quickly and
according to the self-organization of the respective teams.

This forbids access to region X which should either be irrelevant
parts of the monorepo or sensitive reflective configuration data that
should only be controlled by the reigning authority (such as the
access control itself).

Region S however both teams can use and merges therein should be
performed by an authority.

However, within this shared region we still want to implement locks
for blackish objects or implement replacements.

These should then be determined by the overarching authority (for
consensus) and as such /must/ be centralized. Remember consensus means
slow.

Because we are able to isolate only the few contentious resources both
teams must access regions A and B need not gain consensus between
them.

So in effect we have a hybrid decentralization and distribution
strategy that is allowed by a hierarchy in which authority is
delegated to allow for parallel work to be done, while still
maintaining consensus.

**** Specifying Networks

The main idea behind my refugue project is that you can manage your
own *personal network* (PN) while using something like the internet or
sneakernet to actually perform the transfers etc. Kind of like urbit.

The point being that at a semantic level the personal network is what
matters to an individual or enterprise and not really the internet or
what ICANN says about domain names.

This is something I always struggled with because it felt that control
of my own network was out of my hands. In reality ICANN and the
internet simply enable the underlying transport to take place
conveniently and to build my network on top of.

This network really isn't that complicated and simply relies on some
mapping of unique pet names to a collection of addresses which you may
find that *peer* on. Which can be: 

- IP addresses
- domain names
- zeronet addresses
- file paths to mounted volumes

etc.


The same is useful for a distributed/decentralized version control
system. And is useful for allowing polymorphism in the data that
resides on each peer.

For example I want to check out just a portion of the enterprise
monorepo because I either don't need all of it, can't hold all of
it, or am not allowed to hold all of it.

Specifying a network from a single holder of authority is a way to
achieve this.

How consensus on this single point of authority is decided can be
customized but can be something like: 

- zookeeper or raft
- blockchain
- held in a person i.e. CEO





*** Prior Art

- boar
- git-lfs
- git-annex
- subversion

** In-Repo Issue Tracking 


*** Description

*** Prior Art

**** git-issue

https://github.com/dspinellis/git-issue

Pros:
- import/export to common forges like github and gitlab
- implemented in shell scripts

Cons:
- fixed schema, oriented around small files of undescribed schemas, non-extendable
- only works with git
- not editable directly via editor easily:
  - metadata and description spread across many files for each issue
  - file/dir names based on hashes rather than anything meaningful

**** deft

https://github.com/npryce/deft

Pros:
- VCS agnostic
- Text-editor friendly
  - issues live in a renamable dir
  - only 2 files: description + metadata
  - files named after file

Cons:
- Python 2
- no forge integration
- must manually name issues

**** git-dit

https://github.com/neithernut/git-dit



*** Requirements

After reviewing the existing options I like the UX of ~deft~ the best
but it suffers from some implementation issues mainly being
implemented in Python 2.

I want my issues to be able to be edited by a text editor as not onyl
a secondary means, but as a first class thing.

This doesn't preclude command line tools for this purpose but using
only a text editor should be ergonomic.

Ideally anyhow it would get integrated to emacs or VSCode etc. which
is how these kinds of tools work better anyhow.

**** Single file issues

Each issue should be only a single file.

It is too annoying to switch between different files to tweak and
twiddle metadata.

In the limit individual issues could be of different actual formats
that allow for varying degrees of semantic data. (similar to git
commits).

Issues can be in SOML (my minor TOML variant for writing lots of text)
where you can add tags, flags, and metadata as you please alongside
long descriptions in different markup languages.

They can also be in other formats as you wish and should be a decision
each project should make.

That is the schema/protocol for the directory layout etc. should be
orthogonal to the content of the actual issues.

This can only really be achieved with single file issues.

However, there should be affordances for attaching resources (like
images etc.) into sidecar directories. But these really should contain
any issue writer writings.

Other options for issue formats could be:

- skribilio
- org-mode
- markdown
- plaintext
- XML, HTML
- JSON

Here is an example with SOML:

#+begin_src soml
  First line of the issue

  [meta]

  status = 'open'
  assigned = '@salotz'
  tags = [
       'feature',
       'bug',
       'critical',
  ]

  [description]

  Here is the longer description of the issue describing what to do
  about it.

  It should allow introspection with links and such.

  Here I am linking the path to a piece of code I want to reference:

  [[proj:/src/package/__init__.py?line=30;col=12][code here]]

  [discussion]

  [[comments]]

  contributor = '@salotz'

  message = [

  I think this is a good issue, I can even do this myself.

  ]

  [[comments]]

  contributor = '@wumpus'

  message = [
  I disagree, I don't think its worth our time.
  ]
#+end_src


**** Automatic issue naming

Its not always easy to manually name issues. That is why things like
github and gitlab use auto-naming things where they use numbers to
refer to them.

Tools should support this so that people don't have to name their
issues.

However, to keep things friendly the file names should support adding
extra "fields" to add short descriptions.

Examples:

An uncommented issue should just be a number. Issues should increase
monotonically and start at 0 and should include 0 padding for sorting
of crummy legacy software. All tools should sort numerically.

The zeroth issue:

#+begin_example
000000.issue.schema
#+end_example

The next issue:

#+begin_example
000001.issue.schema
#+end_example

The issue after with a name ~issue-key~ also:

#+begin_example
000002_issue-key.issue.schema
#+end_example


* COMMENT Local variables

# Local Variables:
# mode: org
# org-todo-keyword-faces: (("IDEA" . "magenta") ("WIP" . "magenta") ("DRAFT" . "orange") ("STABLE" . org-done))
# End:


